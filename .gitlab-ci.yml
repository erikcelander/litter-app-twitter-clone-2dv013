stages:
  - build
  - staging
  - deploy

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - PROJECT_VERSION=$(cat ${CI_PROJECT_DIR}/package.json | grep '"version":' | sed 's/[^0-9.]//g')
    - /kaniko/executor --context "${CI_PROJECT_DIR}" --dockerfile "${CI_PROJECT_DIR}/Dockerfile.staging" --destination "${CI_REGISTRY_IMAGE}/litter-application:staging-${PROJECT_VERSION}"
    - /kaniko/executor --context "${CI_PROJECT_DIR}" --dockerfile "${CI_PROJECT_DIR}/Dockerfile.production" --destination "${CI_REGISTRY_IMAGE}/litter-application:production-${PROJECT_VERSION}"

staging:
  stage: staging
  image: gcr.io/k8s-skaffold/skaffold:v2.8.0
  script:
    - kubectl config use-context $K8S_CONTEXT
    - kubectl create secret docker-registry regcred --docker-server=$CI_REGISTRY --docker-username=$CI_DEPLOY_USER --docker-password=$CI_DEPLOY_PASSWORD --dry-run=client -o yaml | kubectl apply -f -
    - PROJECT_VERSION=$(cat ${CI_PROJECT_DIR}/package.json | grep '"version":' | sed 's/[^0-9.]//g')
    - skaffold deploy --profile staging --images ${CI_REGISTRY_IMAGE}/litter-application:staging-${PROJECT_VERSION}
    - kubectl get deployments -n staging
    - kubectl get pods -n staging
    - kubectl get services -n staging

deploy:
  stage: deploy
  image: gcr.io/k8s-skaffold/skaffold:v2.8.0
  when: manual
  script:
    - kubectl config use-context $K8S_CONTEXT
    - kubectl create secret docker-registry regcred --docker-server=$CI_REGISTRY --docker-username=$CI_DEPLOY_USER --docker-password=$CI_DEPLOY_PASSWORD --dry-run=client -o yaml | kubectl apply -f -
    - PROJECT_VERSION=$(cat ${CI_PROJECT_DIR}/package.json | grep '"version":' | sed 's/[^0-9.]//g')
    - skaffold deploy --profile production --images ${CI_REGISTRY_IMAGE}/litter-application:production-${PROJECT_VERSION}
    - kubectl get deployments
    - kubectl get pods
    - kubectl get services