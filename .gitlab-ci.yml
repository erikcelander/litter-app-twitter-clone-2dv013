stages:
  - build
  - deploy_to_staging
  - deploy_to_production

build:
  stage: build
  image:
    name: node:latest
    entrypoint: [""]
  script:
    - npm install
    - npm run build
    - /kaniko/executor --context "${CI_PROJECT_DIR}" --dockerfile "${CI_PROJECT_DIR}/Dockerfile.production" --destination "${CI_REGISTRY_IMAGE}/litter-application:${CI_COMMIT_TAG:-latest}"

# The test stage is commented out, but you can include it if you have tests to run
# test:
#   stage: test
#   image: <your-test-image>
#   script:
#     - <commands-to-run-tests>

deploy_to_staging:
  stage: deploy_to_staging
  image: gcr.io/k8s-skaffold/skaffold:v2.8.0
  when: manual
  script:
    - export BASE_PATH=/staging
    - npm run build
    - kubectl config use-context $K8S_CONTEXT
    - kubectl create secret docker-registry regcred --docker-server=$CI_REGISTRY --docker-username=$CI_DEPLOY_USER --docker-password=$CI_DEPLOY_PASSWORD --dry-run=client -o yaml | kubectl apply -f -
    - skaffold deploy --profile staging --images ${CI_REGISTRY_IMAGE}/litter-application:${CI_COMMIT_TAG:-latest}
    - kubectl get deployments -n staging
    - kubectl get pods -n staging
    - kubectl get services -n staging

deploy_to_production:
  stage: deploy_to_production
  image: gcr.io/k8s-skaffold/skaffold:v2.8.0
  when: manual
  script:
    - export BASE_PATH=/
    - npm run build
    - kubectl config use-context $K8S_CONTEXT
    - kubectl create secret docker-registry regcred --docker-server=$CI_REGISTRY --docker-username=$CI_DEPLOY_USER --docker-password=$CI_DEPLOY_PASSWORD --dry-run=client -o yaml | kubectl apply -f -
    - skaffold deploy --profile production --images ${CI_REGISTRY_IMAGE}/litter-application:${CI_COMMIT_TAG:-latest}
    - kubectl get deployments
    - kubectl get pods
    - kubectl get services
